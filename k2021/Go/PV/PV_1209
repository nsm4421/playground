package main

import (
	"fmt"
	"log"
	"math"
	"os"
	"strconv"

	"github.com/go-gota/gota/dataframe"
)

func main() {

	// sample
	coverage := "LB7408"
	x := 30
	sex := 1
	n := 5
	m := 5
	AMT := 1000000
	injure := 0
	driver := 0
	i := 0.0025

	var mp MyPV

	// csv 파일 읽기
	mp.readCSV("./Qx.csv", "./Code.csv")

	// 계약정보 세팅
	mp.setContractInfo(coverage, x, sex, n, m, AMT, injure, driver, i)

	// 계약정보 출력
	mp.printContractInfo()

	// 담보정보 세팅
	mp.setCoverageInfo()

	// 담보정보 출력
	mp.printCoverageInfo()

	// 위험률 매핑
	mp.QxMapping()
	fmt.Println(mp.Qx.Bx[1].qx[x : x+n+1])

	// 기수식 초기화
	mp.initSymbols()

	// 기수식 계산
	mp.calcSymbols()

	// 순보험료 계산
	mp.calc_NP()
	fmt.Println("年납 순보는 ", mp.result.NP1, "원 | 月납 순보는 ", mp.result.NP12, " 원")

}

// --------------- Struct 정의 --------------- //

// dataframe
type dataframes struct {
	df_Qx      dataframe.DataFrame // 위험률 테이블
	df_Code    dataframe.DataFrame // 담보정보
	df_Expense dataframe.DataFrame // 사업비정보
	df_Check   dataframe.DataFrame // 대상건
}

// 계약정보
type contractInfo struct {
	coverageKey string  // 담보키
	coverage    string  // 담보코드
	x           int     // 가입연령
	sex         int     //성별
	n           int     // 보험기간
	m           int     //납입기간
	AMT         float64 // 가입금액
	injure      int     //상해급수
	driver      int     // 운전자급수
	i           float64 //이자율
	v           float64 // 할인율
}

// 위험률 배열
type qx_arr struct {
	qx [120]float64
}

// 탈퇴율(exit), 급부율(benefit), 납면율(grant)
type Qx struct {
	Ex [10]qx_arr
	Bx [10]qx_arr
	Gx qx_arr
}

// 담보정보
type coverageInfo struct {
	numBenefit    int         // 급부개수
	exitCode      [10]string  //탈퇴율코드
	exitType      [10]string  //탈퇴율Type
	nonCov        [10]int     //부담보기간
	benefitCode   [10]string  //급부율코드
	benefitType   [10]string  //급부율Type
	payRate       [10]float64 //지급률
	reduceRate    [10]float64 //감액률
	reducePeriod  [10]int     //감액기간
	grantCode     string      //납면율코드
	grantType     string      //납면율Type
	invalidPeriod int         //무효해지기간
}

// 기수식
type symbols struct {
	lx      [10][120]float64
	lxPrime [120]float64
	Dx      [120]float64
	DxPrime [120]float64
	Nx      [120]float64
	NxPrime [120]float64
	Cx      [10][120]float64
	Mx      [10][120]float64
	SUMx    [120]float64
}

// 계산결과
type result struct {
	NP1_full  float64 // 年납 순보 (full)
	NP12_full float64 // 月납 순보 (full)
	G1_full   float64 // 年납 영보 (full)
	G12_full  float64 // 月납 영보 (full)
	NP1       int     // 年납 순보 (round)
	NP12      int     // 月납 순보 (round)
	G1        int     // 年납 영보 (round)
	G12       int     // 月납 영보 (round)
}

type MyPV struct {
	df           dataframes   // 데이터 (csv파일)
	contractInfo contractInfo // 계약정보
	coverageInfo coverageInfo // 급부정보
	Qx           Qx           //탈퇴율, 급부율, 납면율
	symbols      symbols      // 기수식
	result       result       //계산결과
}

// --------------- CSV 파일 읽기 --------------- //

func getDataframeFromCSV(csvPath string) dataframe.DataFrame {
	csvFile, err := os.Open(csvPath)
	if err != nil {
		log.Fatal(err) // error 출력
	}
	defer csvFile.Close()
	df := dataframe.ReadCSV(csvFile)
	return df
}

// csv 파일 읽기
func (mp *MyPV) readCSV(csvPath_qx string, csvPath_code string) {

	df_qx := getDataframeFromCSV(csvPath_qx)
	df_qx.SetNames("RiskKey", "x", "Male", "Female")
	mp.df.df_Qx = df_qx

	df_code := getDataframeFromCSV(csvPath_code)
	df_code.SetNames("CoverageKey", "BenefitNum", "ExitCode", "ExitType", "NonCov",
		"BenefitCode", "BenefitType", "PayRate", "ReduceRate", "ReducePeriod",
		"GrantCode", "GrantType", "InvalidPeriod")
	mp.df.df_Code = df_code

}

// --------------- 계약정보 mapping --------------- //

func (mp *MyPV) setContractInfo(coverage string, x int, sex int, n int, m int, AMT int, injure int, driver int, i float64) {
	mp.contractInfo.coverage = coverage
	mp.contractInfo.x = x
	mp.contractInfo.sex = sex
	mp.contractInfo.n = n
	mp.contractInfo.m = m
	mp.contractInfo.AMT = float64(AMT)
	mp.contractInfo.injure = injure
	mp.contractInfo.driver = driver
	// 담보키
	if injure != 0 {
		mp.contractInfo.coverageKey = mp.contractInfo.coverage + "_" + strconv.Itoa(injure)
	} else if driver != 0 {
		mp.contractInfo.coverageKey = mp.contractInfo.coverage + "_" + strconv.Itoa(driver)
	} else {
		mp.contractInfo.coverageKey = mp.contractInfo.coverage
	}
	mp.contractInfo.i = i
	mp.contractInfo.v = 1 / (1 + i)
}

// --------------- 계약정보 출력 --------------- //
func (mp *MyPV) printContractInfo() {
	s := fmt.Sprintf("담보명 : %s | 담보키 : %s | 가입연령 : %d |  성별코드 : %d |보험기간 : %d | 납입기간 : %d | 가입금액 : %.0f | 상해급수 : %d | 운전자급수 : %d",
		mp.contractInfo.coverage, mp.contractInfo.coverageKey, mp.contractInfo.x, mp.contractInfo.n, mp.contractInfo.m,
		mp.contractInfo.sex, mp.contractInfo.AMT, mp.contractInfo.injure, mp.contractInfo.driver)
	fmt.Println(s)
}

// --------------- 담보정보 mapping --------------- //
func (mp *MyPV) setCoverageInfo() {

	// 담보키로 dataframe을 slicing
	filter := dataframe.F{
		Colname:    "CoverageKey",
		Comparator: "==",
		Comparando: mp.contractInfo.coverageKey,
	}
	df := mp.df.df_Code.Filter(filter)

	bNum := 0
	mp.coverageInfo.numBenefit = 0
	for idx, row := range df.Records() {
		// (0)CoverageKey,(1)BenefitNum | (2)ExitCode,(3)ExitType,(4)NonCov |
		// (5)BenefitCode,(6)BenefitType,(7)PayRate,(8)ReduceRate,(9)ReducePeriod | (10)GrantCode,(11)GrantType,(12)InvalidPeriod

		if idx == 0 { // 헤더 무시
			continue
		}

		bNum, _ = strconv.Atoi(row[1])
		// Grant
		if bNum == 99 {
			mp.coverageInfo.grantCode = row[10]
			mp.coverageInfo.grantType = row[11]
			mp.coverageInfo.invalidPeriod, _ = strconv.Atoi(row[12])
			break
		} else {
			// Exit
			mp.coverageInfo.exitCode[bNum] = row[2]
			mp.coverageInfo.exitType[bNum] = row[3]
			mp.coverageInfo.nonCov[bNum], _ = strconv.Atoi(row[4])
			// Benefit
			if bNum != 0 {
				mp.coverageInfo.numBenefit += 1
				mp.coverageInfo.benefitCode[bNum] = row[5]
				mp.coverageInfo.benefitType[bNum] = row[6]
				mp.coverageInfo.payRate[bNum], _ = strconv.ParseFloat(row[7], 64)
				mp.coverageInfo.reduceRate[bNum], _ = strconv.ParseFloat(row[8], 64)
				mp.coverageInfo.reducePeriod[bNum], _ = strconv.Atoi(row[9])
			}
		}
	}

	if mp.coverageInfo.numBenefit == 0 {
		log.Fatal(mp.contractInfo.coverageKey, "에 해당하는 급부 개수가 0개")
	}
}

// --------------- 담보정보 출력 --------------- //

func (mp *MyPV) printCoverageInfo() {
	for i := 0; i < mp.coverageInfo.numBenefit+1; i++ {
		// 탈퇴정보
		s_exit := fmt.Sprintf("Exit(%d) | ExitCode : %s | ExitType : %s | NonCov : %d",
			i, mp.coverageInfo.exitCode[i], mp.coverageInfo.exitType[i], mp.coverageInfo.nonCov[i])
		// 급부정보
		s_benefit := fmt.Sprintf("Benefit(%d) | BenefitCode : %s | BenefitType : %s | PayRate : %0.3f | ReduceRate : %0.3f | ReducePeriod : %d",
			i, mp.coverageInfo.benefitCode[i], mp.coverageInfo.benefitType[i], mp.coverageInfo.payRate[i], mp.coverageInfo.reduceRate[i],
			mp.coverageInfo.reducePeriod[i])
		fmt.Println(s_exit)
		if i != 0 {
			fmt.Println(s_benefit)
		}
	}
	// 납면정보
	s_grant := fmt.Sprintf("Grant | GrantCode : %s | GrantType : %s | InvalidPeriod : %d",
		mp.coverageInfo.grantCode, mp.coverageInfo.grantType, mp.coverageInfo.invalidPeriod)
	fmt.Println(s_grant)
}

// --------------- 위험률키로 위험률배열 채우기 --------------- //
func (qx_arr *qx_arr) getQxWithKey(df_qx dataframe.DataFrame, riskKey string, sex int) {
	var x int
	var q float64

	filter := dataframe.F{
		Colname:    "RiskKey",
		Comparator: "==",
		Comparando: riskKey,
	}
	df := df_qx.Filter(filter)

	for idx, row := range df.Records() {
		if idx == 0 { // ignore header
			continue
		}
		if row[1] == "ZZ" { // 단일률
			q, _ = strconv.ParseFloat(row[1+sex], 64)
			for x = 0; x < 120; x++ {
				qx_arr.qx[x] = q
			}
			break
		} else {
			x, _ = strconv.Atoi(row[1])
			q, _ = strconv.ParseFloat(row[1+sex], 64)
			qx_arr.qx[x] = q
		}
	}
}

// --------------- Qx mapping --------------- //

func (mp *MyPV) QxMapping() {

	sex := mp.contractInfo.sex
	injure := mp.contractInfo.injure
	driver := mp.contractInfo.driver
	numBenefit := mp.coverageInfo.numBenefit

	var eCode, bCode, gCode, eKey, bKey, gKey string

	for i := 0; i < numBenefit+1; i++ {

		// 탈퇴위험률키(exit) mapping
		eCode = mp.coverageInfo.exitCode[i]
		switch mp.coverageInfo.exitType[i] {
		case "I":
			eKey = eCode + "_" + strconv.Itoa(injure)
		case "D":
			eKey = eCode + "_" + strconv.Itoa(driver)
		default:
			eKey = eCode
		}

		// 탈퇴 배열 채우기
		mp.Qx.Ex[i].getQxWithKey(mp.df.df_Qx, eKey, sex)

		if i > 0 {
			// 급부율(benefit) 위험률키 mapping
			bCode = mp.coverageInfo.benefitCode[i]
			switch mp.coverageInfo.benefitType[i] {
			case "I":
				bKey = bCode + "_" + strconv.Itoa(injure)
			case "D":
				bKey = bCode + "_" + strconv.Itoa(driver)
			default:
				bKey = bCode
			}

			// 급부율 배열 채우기
			mp.Qx.Bx[i].getQxWithKey(mp.df.df_Qx, bKey, sex)
		}
	}

	// 납면(grant) 위험률키 mapping
	gCode = mp.coverageInfo.grantCode
	switch mp.coverageInfo.grantType {
	case "I":
		gKey = gCode + "_" + strconv.Itoa(injure)
	case "D":
		gKey = gCode + "_" + strconv.Itoa(driver)
	default:
		gKey = gCode
	}

	// 납면 위험률 배열 채우기
	mp.Qx.Gx.getQxWithKey(mp.df.df_Qx, gKey, sex)

}

// --------------- 기수식 초기화 --------------- //
func (mp *MyPV) initSymbols() {
	for t := 0; t < 120; t++ {
		for i := 0; i < 10; i++ {
			mp.symbols.lx[i][t] = 0
			mp.symbols.Cx[i][t] = 0
			mp.symbols.Mx[i][t] = 0
		}
		mp.symbols.lxPrime[t] = 0
		mp.symbols.Dx[t] = 0
		mp.symbols.DxPrime[t] = 0
		mp.symbols.NxPrime[t] = 0
		mp.symbols.SUMx[t] = 0
	}
}

// --------------- 기수식 계산 --------------- //
func (mp *MyPV) calcSymbols() {

	x := mp.contractInfo.x
	n := mp.contractInfo.n
	v := mp.contractInfo.v
	numBenefit := mp.coverageInfo.numBenefit

	// lx 계산
	for bNum := 0; bNum < numBenefit+1; bNum++ {
		mp.symbols.lx[bNum][x] = 100000
		for t := x; t < x+n+1; t++ {
			if t == x {
				mp.symbols.lx[bNum][t+1] = mp.symbols.lx[bNum][t] * (1 - mp.Qx.Ex[bNum].qx[t]*float64(1-mp.coverageInfo.nonCov[bNum]/12))
			} else {
				mp.symbols.lx[bNum][t+1] = mp.symbols.lx[bNum][t] * (1 - mp.Qx.Ex[bNum].qx[t])
			}
		}
	}

	// l'x
	mp.symbols.lxPrime[x] = 100000
	for t := x; t < x+n+1; t++ {
		if t == x {
			mp.symbols.lxPrime[t+1] = mp.symbols.lxPrime[t] * (1 - mp.Qx.Gx.qx[t]*float64(1-mp.coverageInfo.invalidPeriod/12))
		} else {
			mp.symbols.lxPrime[t+1] = mp.symbols.lxPrime[t] * (1 - mp.Qx.Gx.qx[t])
		}
	}

	// Dx, D'x
	for t := x; t < x+n+1; t++ {
		mp.symbols.Dx[t] = mp.symbols.lx[0][t] * math.Pow(v, float64(t-x))
		mp.symbols.DxPrime[t] = mp.symbols.lxPrime[t] * math.Pow(v, float64(t-x))
	}

	// Cx
	for bNum := 1; bNum < numBenefit+1; bNum++ {
		for t := x; t < x+n+1; t++ {
			mp.symbols.Cx[bNum][t] = mp.symbols.lx[bNum][t] * mp.Qx.Bx[bNum].qx[t] * math.Pow(v, float64(t-x)+0.5)
		}
	}

	// Mx
	for bNum := 1; bNum < numBenefit+1; bNum++ {
		mp.symbols.Mx[bNum][x+n] = mp.symbols.Cx[bNum][x+n]
		for t := x + n - 1; t >= x; t-- {
			mp.symbols.Mx[bNum][t] = mp.symbols.Cx[bNum][t] + mp.symbols.Mx[bNum][t+1]
		}
	}

	// Nx, N'x
	mp.symbols.Nx[x+n] = mp.symbols.Dx[x+n]
	mp.symbols.NxPrime[x+n] = mp.symbols.DxPrime[x+n]
	for t := x + n - 1; t >= x; t-- {
		mp.symbols.Nx[t] = mp.symbols.Dx[t] + mp.symbols.Nx[t+1]
		mp.symbols.NxPrime[t] = mp.symbols.DxPrime[t] + mp.symbols.NxPrime[t+1]
	}

	// SUMx
	for bNum := 1; bNum < numBenefit+1; bNum++ {
		for t := x; t < x+n+1; t++ {
			if t < mp.coverageInfo.reducePeriod[bNum] {
				mp.symbols.SUMx[t] += mp.coverageInfo.payRate[bNum] * ((1-mp.coverageInfo.reduceRate[bNum])*(mp.symbols.Mx[bNum][t]-mp.symbols.Mx[bNum][x+mp.coverageInfo.reducePeriod[bNum]]) +
					(mp.symbols.Mx[bNum][x+mp.coverageInfo.reducePeriod[bNum]] - mp.symbols.Mx[bNum][x+n]))
			} else {
				mp.symbols.SUMx[t] += mp.coverageInfo.payRate[bNum] * (mp.symbols.Mx[bNum][t] - mp.symbols.Mx[bNum][x+n])
			}
		}
	}
}

// --------------- 기수식 출력 --------------- //
func (mp *MyPV) printSymbol(symbol string) {
	x := mp.contractInfo.x
	n := mp.contractInfo.n
	numBenefit := mp.coverageInfo.numBenefit

	switch symbol {
	case "lx":
		for i := 0; i < numBenefit+1; i++ {
			fmt.Println(mp.symbols.lx[i][x : x+n])
		}
	case "l'x":
		fmt.Println(mp.symbols.lxPrime[x : x+n])
	case "Dx":
		fmt.Println(mp.symbols.Dx[x : x+n])
	case "D'x":
		fmt.Println(mp.symbols.DxPrime[x : x+n])
	case "Cx":
		for i := 1; i < numBenefit+1; i++ {
			fmt.Println(mp.symbols.Cx[i][x : x+n])
		}
	case "Mx":
		for i := 1; i < numBenefit+1; i++ {
			fmt.Println(mp.symbols.Mx[i][x : x+n])
		}
	case "SUMx":
		fmt.Println(mp.symbols.SUMx[x : x+n+1])
	default:
		log.Fatal("잘못된 기수 입력")
	}
}

// --------------- 납입기수 계산 --------------- //
func (mp *MyPV) calc_N(mPrime int) float64 {
	x := mp.contractInfo.x
	m := mp.contractInfo.m
	m_ := float64(mPrime)
	return m_ * ((mp.symbols.Nx[x] - mp.symbols.Nx[x+m]) - (m_-1)/(2*m_)*(mp.symbols.Dx[x]-mp.symbols.Dx[x+m]))
}

// --------------- 순보험료 계산 --------------- //

func (mp *MyPV) calc_NP() {

	// 年납 순보험료
	mp.result.NP1_full = mp.symbols.SUMx[mp.contractInfo.x] / mp.calc_N(1)
	mp.result.NP1 = int(math.Round(mp.result.NP1_full * mp.contractInfo.AMT))

	// 月납 순보험료
	mp.result.NP12_full = mp.symbols.SUMx[mp.contractInfo.x] / mp.calc_N(12)
	mp.result.NP12 = int(math.Round(mp.result.NP12_full * mp.contractInfo.AMT))

}
